/**
 * AddTransactionCommand ÊµãËØï
 */

import { AddTransactionCommand } from '../commands/add-transaction-command';
import { BeancountEngine } from '../engine/beancount-engine';
import { InteractiveCommandHandler } from '../presentation/cli/interactive-command-handler';

// Mock dependencies
jest.mock('../engine/beancount-engine');
jest.mock('../presentation/cli/interactive-command-handler');

describe('AddTransactionCommand', () => {
  let command: AddTransactionCommand;
  let mockEngine: jest.Mocked<BeancountEngine>;

  beforeEach(() => {
    mockEngine = {
      addTransaction: jest.fn(),
      getTransactions: jest.fn(),
      getAccounts: jest.fn(),
      deleteTransaction: jest.fn(),
      saveTransactions: jest.fn()
    } as any;

    command = new AddTransactionCommand(mockEngine);
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  describe('execute', () => {
    it('Â∫îËØ•ÊàêÂäüÊ∑ªÂä†‰∫§ÊòìËÆ∞ÂΩï', async () => {
      const params = {
        date: '2024-01-15',
        narration: 'ÂçàÈ§ê',
        amount: '25.50',
        accounts: ['Expenses:Food', 'Assets:Cash']
      };

      const result = await command.execute(params);

      expect(result.success).toBe(true);
      expect(result.message).toBe('‚úÖ ‰∫§ÊòìËÆ∞ÂΩïÊ∑ªÂä†ÊàêÂäü');
      expect(result.data).toBeDefined();
      expect(mockEngine.addTransaction).toHaveBeenCalledWith({
        date: new Date('2024-01-15'),
        narration: 'ÂçàÈ§ê',
        postings: [
          {
            account: 'Expenses:Food',
            units: {
              number: 25.50,
              currency: 'CNY'
            }
          },
          {
            account: 'Assets:Cash',
            units: {
              number: -25.50,
              currency: 'CNY'
            }
          }
        ],
        tags: [],
        links: []
      });
    });

    it('Â∫îËØ•Â§ÑÁêÜ‰∫§‰∫íÂºèÊ®°Âºè', async () => {
      const mockInteractiveParams = {
        date: '2024-01-15',
        narration: 'ÂçàÈ§ê',
        amount: '25.50',
        accounts: ['Expenses:Food', 'Assets:Cash']
      };

      (InteractiveCommandHandler.handleAddTransaction as jest.Mock).mockResolvedValue(mockInteractiveParams);

      const result = await command.execute({ interactive: true });

      expect(InteractiveCommandHandler.handleAddTransaction).toHaveBeenCalled();
      expect(mockEngine.addTransaction).toHaveBeenCalled();
      expect(result.success).toBe(true);
    });

    it('Â∫îËØ•Â§ÑÁêÜÁ©∫ÂèÇÊï∞Êó∂‰ΩøÁî®‰∫§‰∫íÂºèÊ®°Âºè', async () => {
      const mockInteractiveParams = {
        date: '2024-01-15',
        narration: 'ÂçàÈ§ê',
        amount: '25.50',
        accounts: ['Expenses:Food', 'Assets:Cash']
      };

      (InteractiveCommandHandler.handleAddTransaction as jest.Mock).mockResolvedValue(mockInteractiveParams);

      const result = await command.execute({});

      expect(InteractiveCommandHandler.handleAddTransaction).toHaveBeenCalled();
      expect(mockEngine.addTransaction).toHaveBeenCalled();
      expect(result.success).toBe(true);
    });

    it('Â∫îËØ•È™åËØÅÂøÖÈúÄÂèÇÊï∞', async () => {
      const params = {
        date: '2024-01-15',
        narration: 'ÂçàÈ§ê'
        // Áº∫Â∞ë amount Âíå accounts
      };

      const result = await command.execute(params);

      expect(result.success).toBe(false);
      expect(result.message).toContain('Áº∫Â∞ëÂøÖÈúÄÂèÇÊï∞');
      expect(mockEngine.addTransaction).not.toHaveBeenCalled();
    });

    it('Â∫îËØ•È™åËØÅË¥¶Êà∑Êï∞Èáè', async () => {
      const params = {
        date: '2024-01-15',
        narration: 'ÂçàÈ§ê',
        amount: '25.50',
        accounts: ['Expenses:Food'] // Âè™Êúâ‰∏Ä‰∏™Ë¥¶Êà∑
      };

      const result = await command.execute(params);

      expect(result.success).toBe(false);
      expect(result.message).toContain('Áº∫Â∞ëÂøÖÈúÄÂèÇÊï∞');
      expect(mockEngine.addTransaction).not.toHaveBeenCalled();
    });

    it('Â∫îËØ•Â§ÑÁêÜÂºïÊìéÈîôËØØ', async () => {
      const params = {
        date: '2024-01-15',
        narration: 'ÂçàÈ§ê',
        amount: '25.50',
        accounts: ['Expenses:Food', 'Assets:Cash']
      };

      mockEngine.addTransaction.mockImplementation(() => {
        throw new Error('ÂºïÊìéÈîôËØØ');
      });

      const result = await command.execute(params);

      expect(result.success).toBe(false);
      expect(result.message).toContain('Ê∑ªÂä†‰∫§ÊòìËÆ∞ÂΩïÂ§±Ë¥•');
    });

    it('Â∫îËØ•Â§ÑÁêÜ‰∫§‰∫íÂºèÊ®°ÂºèÈîôËØØ', async () => {
      (InteractiveCommandHandler.handleAddTransaction as jest.Mock).mockRejectedValue(new Error('‰∫§‰∫íÂºèÈîôËØØ'));

      const result = await command.execute({ interactive: true });

      expect(result.success).toBe(false);
      expect(result.message).toContain('‰∫§‰∫íÂºèÊ∑ªÂä†‰∫§ÊòìËÆ∞ÂΩïÂ§±Ë¥•');
    });

    it('Â∫îËØ•Â§ÑÁêÜÊó†ÊïàÊó•Êúü', async () => {
      const params = {
        date: 'invalid-date',
        narration: 'ÂçàÈ§ê',
        amount: '25.50',
        accounts: ['Expenses:Food', 'Assets:Cash']
      };

      const result = await command.execute(params);

      expect(result.success).toBe(true); // Êó•ÊúüËß£Êûê‰∏ç‰ºöÊäõÂá∫ÈîôËØØÔºå‰ºöÂàõÂª∫Invalid Date
      expect(mockEngine.addTransaction).toHaveBeenCalled();
    });

    it('Â∫îËØ•Â§ÑÁêÜÊó†ÊïàÈáëÈ¢ù', async () => {
      const params = {
        date: '2024-01-15',
        narration: 'ÂçàÈ§ê',
        amount: 'invalid-amount',
        accounts: ['Expenses:Food', 'Assets:Cash']
      };

      const result = await command.execute(params);

      expect(result.success).toBe(true); // parseFloat‰ºöËøîÂõûNaNÔºå‰ΩÜ‰∏ç‰ºöÊäõÂá∫ÈîôËØØ
      expect(mockEngine.addTransaction).toHaveBeenCalled();
    });
  });

  describe('getHelp', () => {
    it('Â∫îËØ•ËøîÂõûÂ∏ÆÂä©‰ø°ÊÅØ', () => {
      const help = command.getHelp();

      expect(help).toContain('üìù Ê∑ªÂä†‰∫§ÊòìËÆ∞ÂΩï');
      expect(help).toContain('Áî®Ê≥ï: add_transaction');
      expect(help).toContain('date: ‰∫§ÊòìÊó•Êúü');
      expect(help).toContain('narration: ‰∫§ÊòìÊèèËø∞');
      expect(help).toContain('amount: ‰∫§ÊòìÈáëÈ¢ù');
      expect(help).toContain('accounts: Ë¥¶Êà∑ÂàóË°®');
    });
  });

  describe('validateParams', () => {
    it('Â∫îËØ•È™åËØÅÂèÇÊï∞', () => {
      const params = {
        date: '2024-01-15',
        narration: 'ÂçàÈ§ê',
        amount: '25.50',
        accounts: ['Expenses:Food', 'Assets:Cash']
      };

      const result = command['validateParams'](params);
      expect(result.valid).toBe(true);
      expect(result.errors).toEqual([]);
    });
  });
}); 