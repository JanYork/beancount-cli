import { BeancountCLI, CommandParser } from '../cli';
import { BeancountEngine } from '../engine/beancount-engine';
import { CommandFactory } from '../commands/command-factory';

// Mock dependencies
jest.mock('../engine/beancount-engine');
jest.mock('../commands/command-factory');
jest.mock('inquirer');

const mockBeancountEngine = BeancountEngine as jest.MockedClass<typeof BeancountEngine>;

describe('BeancountCLI', () => {
  let cli: BeancountCLI;
  let mockEngine: jest.Mocked<BeancountEngine>;

  beforeEach(() => {
    jest.clearAllMocks();
    
    // Mock console.log to suppress output during tests
    jest.spyOn(console, 'log').mockImplementation(() => {});
    
    // Mock engine instance
    mockEngine = {
      getFileStats: jest.fn(),
      reload: jest.fn(),
    } as any;
    
    mockBeancountEngine.mockImplementation(() => mockEngine);
    
    // Mock inquirer
    const mockInquirer = require('inquirer');
    mockInquirer.prompt = jest.fn();
    
    cli = new BeancountCLI('test.beancount');
  });

  describe('constructor', () => {
    it('Â∫îËØ•ÂàõÂª∫BeancountEngineÂÆû‰æã', () => {
      expect(mockBeancountEngine).toHaveBeenCalledWith('test.beancount');
    });
  });

  describe('printBanner', () => {
    it('Â∫îËØ•ÊâìÂç∞Ê¨¢ËøéÊ®™ÂπÖ', () => {
      const consoleSpy = jest.spyOn(console, 'log').mockImplementation();
      
      // ‰ΩøÁî®ÂèçÂ∞ÑË∞ÉÁî®ÁßÅÊúâÊñπÊ≥ï
      (cli as any).printBanner();
      
      expect(consoleSpy).toHaveBeenCalledWith();
      expect(consoleSpy).toHaveBeenCalledWith('ü§ñ  Beancount CLI');
      expect(consoleSpy).toHaveBeenCalledWith('    Êô∫ËÉΩËÆ∞Ë¥¶ÂëΩ‰ª§Ë°åÂ∑•ÂÖ∑');
      
      consoleSpy.mockRestore();
    });
  });

  describe('printStatus', () => {
    it('Â∫îËØ•ÊâìÂç∞Êñá‰ª∂Áä∂ÊÄÅ‰ø°ÊÅØ', () => {
      const mockStats = {
        totalAccounts: 5,
        totalTransactions: 100,
        totalBalances: 10,
        totalErrors: 0,
        filePath: 'test.beancount'
      };
      
      mockEngine.getFileStats.mockReturnValue(mockStats);
      
      const consoleSpy = jest.spyOn(console, 'log').mockImplementation();
      
      (cli as any).printStatus();
      
      expect(mockEngine.getFileStats).toHaveBeenCalled();
      expect(consoleSpy).toHaveBeenCalledWith('üìä Êñá‰ª∂Áä∂ÊÄÅ:');
      expect(consoleSpy).toHaveBeenCalledWith('   Ë¥¶Êà∑Êï∞Èáè: 5');
      expect(consoleSpy).toHaveBeenCalledWith('   ‰∫§ÊòìËÆ∞ÂΩï: 100');
      expect(consoleSpy).toHaveBeenCalledWith('   ‰ΩôÈ¢ùËÆ∞ÂΩï: 10');
      expect(consoleSpy).toHaveBeenCalledWith('   ÈîôËØØÊï∞Èáè: 0');
      expect(consoleSpy).toHaveBeenCalledWith('   Êñá‰ª∂Ë∑ØÂæÑ: test.beancount');
      
      consoleSpy.mockRestore();
    });

    it('Â∫îËØ•Â§ÑÁêÜËé∑ÂèñÁä∂ÊÄÅ‰ø°ÊÅØÂ§±Ë¥•ÁöÑÊÉÖÂÜµ', () => {
      mockEngine.getFileStats.mockImplementation(() => {
        throw new Error('File not found');
      });
      
      const consoleSpy = jest.spyOn(console, 'log').mockImplementation();
      
      (cli as any).printStatus();
      
      expect(consoleSpy).toHaveBeenCalledWith('‚ö†Ô∏è  Êó†Ê≥ïËé∑ÂèñÁä∂ÊÄÅ‰ø°ÊÅØ');
      
      consoleSpy.mockRestore();
    });
  });

  describe('showPrompt', () => {
    it('Â∫îËØ•ÊòæÁ§∫ÂëΩ‰ª§ÊèêÁ§∫Âπ∂Â§ÑÁêÜÁî®Êà∑ËæìÂÖ•', async () => {
      const mockUserInput = 'help';
      const mockInquirer = require('inquirer');
      mockInquirer.prompt.mockResolvedValue({ userInput: mockUserInput });
      
      const processCommandSpy = jest.spyOn(cli as any, 'processCommand');
      
      await (cli as any).showPrompt();
      
      expect(mockInquirer.prompt).toHaveBeenCalledWith([
        {
          type: 'input',
          name: 'userInput',
          message: 'üí° ËæìÂÖ•ÂëΩ‰ª§ (ËæìÂÖ• /help Êü•ÁúãÂ∏ÆÂä©):',
          default: ''
        }
      ]);
      expect(processCommandSpy).toHaveBeenCalledWith(mockUserInput);
      
      processCommandSpy.mockRestore();
    });

    it('Â∫îËØ•ÂøΩÁï•Á©∫ÁöÑÁî®Êà∑ËæìÂÖ•', async () => {
      const mockInquirer = require('inquirer');
      mockInquirer.prompt.mockResolvedValue({ userInput: '' });
      
      const processCommandSpy = jest.spyOn(cli as any, 'processCommand');
      
      await (cli as any).showPrompt();
      
      expect(processCommandSpy).not.toHaveBeenCalled();
      
      processCommandSpy.mockRestore();
    });

    it('Â∫îËØ•ÂøΩÁï•Âè™ÂåÖÂê´Á©∫Ê†ºÁöÑÁî®Êà∑ËæìÂÖ•', async () => {
      const mockInquirer = require('inquirer');
      mockInquirer.prompt.mockResolvedValue({ userInput: '   ' });
      
      const processCommandSpy = jest.spyOn(cli as any, 'processCommand');
      
      await (cli as any).showPrompt();
      
      expect(processCommandSpy).not.toHaveBeenCalled();
      
      processCommandSpy.mockRestore();
    });
  });

  describe('processCommand', () => {
    beforeEach(() => {
      // Mock CommandFactory
      jest.spyOn(CommandFactory, 'createCommand').mockImplementation(() => null);
    });

    it('Â∫îËØ•Â§ÑÁêÜquitÂëΩ‰ª§', async () => {
      const consoleSpy = jest.spyOn(console, 'log').mockImplementation();
      
      await (cli as any).processCommand('quit');
      
      expect(consoleSpy).toHaveBeenCalledWith('üëã ÂÜçËßÅÔºÅ');
      
      consoleSpy.mockRestore();
    });

    it('Â∫îËØ•Â§ÑÁêÜhelpÂëΩ‰ª§ÔºàÊó†ÂèÇÊï∞Ôºâ', async () => {
      const mockHelpCommand = {
        execute: jest.fn().mockReturnValue({ success: true, message: 'Â∏ÆÂä©‰ø°ÊÅØ' })
      } as any;
      
      jest.spyOn(CommandFactory, 'createCommand').mockReturnValue(mockHelpCommand);
      
      const displayResultSpy = jest.spyOn(cli as any, 'displayResult');
      
      await (cli as any).processCommand('help');
      
      expect(CommandFactory.createCommand).toHaveBeenCalledWith('help', mockEngine);
      expect(mockHelpCommand.execute).toHaveBeenCalledWith({});
      expect(displayResultSpy).toHaveBeenCalledWith({ success: true, message: 'Â∏ÆÂä©‰ø°ÊÅØ' });
      
      displayResultSpy.mockRestore();
    });

    it('Â∫îËØ•Â§ÑÁêÜhelpÂëΩ‰ª§ÔºàÂ∏¶ÂëΩ‰ª§ÂèÇÊï∞Ôºâ', async () => {
      const consoleSpy = jest.spyOn(console, 'log').mockImplementation();
      
      await (cli as any).processCommand('help add');
      
      expect(consoleSpy).toHaveBeenCalledWith('Ê∑ªÂä†‰∫§ÊòìËÆ∞ÂΩï„ÄÇÁî®Ê≥ï: /add Ë¥¶Êà∑ ÈáëÈ¢ù [ÊèèËø∞]');
      
      consoleSpy.mockRestore();
    });

    it('Â∫îËØ•Â§ÑÁêÜhelpÂëΩ‰ª§ÔºàÊú™Áü•ÂëΩ‰ª§Ôºâ', async () => {
      const handleErrorSpy = jest.spyOn(cli as any, 'handleError');
      
      await (cli as any).processCommand('help unknown');
      
      expect(handleErrorSpy).toHaveBeenCalledWith('Êú™Áü•ÂëΩ‰ª§: unknown');
      
      handleErrorSpy.mockRestore();
    });

    it('Â∫îËØ•Â§ÑÁêÜreloadÂëΩ‰ª§', async () => {
      const consoleSpy = jest.spyOn(console, 'log').mockImplementation();
      const printStatusSpy = jest.spyOn(cli as any, 'printStatus');
      
      await (cli as any).processCommand('reload');
      
      expect(mockEngine.reload).toHaveBeenCalled();
      expect(consoleSpy).toHaveBeenCalledWith('üîÑ Êñá‰ª∂ÈáçÊñ∞Âä†ËΩΩÊàêÂäü');
      expect(printStatusSpy).toHaveBeenCalled();
      
      consoleSpy.mockRestore();
      printStatusSpy.mockRestore();
    });

    it('Â∫îËØ•Â§ÑÁêÜÂÖ∂‰ªñÂëΩ‰ª§', async () => {
      const mockCommand = {
        execute: jest.fn().mockReturnValue({ success: true, message: 'ÂëΩ‰ª§ÊâßË°åÊàêÂäü' })
      } as any;
      
      jest.spyOn(CommandFactory, 'createCommand').mockReturnValue(mockCommand);
      
      const displayResultSpy = jest.spyOn(cli as any, 'displayResult');
      
      await (cli as any).processCommand('add');
      
      expect(CommandFactory.createCommand).toHaveBeenCalledWith('add', mockEngine);
      expect(mockCommand.execute).toHaveBeenCalledWith({});
      expect(displayResultSpy).toHaveBeenCalledWith({ success: true, message: 'ÂëΩ‰ª§ÊâßË°åÊàêÂäü' });
      
      displayResultSpy.mockRestore();
    });

    it('Â∫îËØ•Â§ÑÁêÜÊú™Áü•ÂëΩ‰ª§', async () => {
      // ‰ΩøÁî®‰∏Ä‰∏™ÊúâÊïàÁöÑÂëΩ‰ª§ÂêçÔºå‰ΩÜCommandFactoryËøîÂõûnull
      jest.spyOn(CommandFactory, 'createCommand').mockReturnValue(null);
      
      const handleErrorSpy = jest.spyOn(cli as any, 'handleError');
      
      await (cli as any).processCommand('add');
      
      expect(handleErrorSpy).toHaveBeenCalledWith('Êú™Áü•ÂëΩ‰ª§: add');
      
      handleErrorSpy.mockRestore();
    });

    it('Â∫îËØ•Â§ÑÁêÜÊó†ÊïàÂëΩ‰ª§', async () => {
      const handleErrorSpy = jest.spyOn(cli as any, 'handleError');
      
      await (cli as any).processCommand('invalid');
      
      expect(handleErrorSpy).toHaveBeenCalledWith('Êó†ÊïàÁöÑÂëΩ‰ª§: invalid');
      
      handleErrorSpy.mockRestore();
    });
  });

  describe('displayResult', () => {
    it('Â∫îËØ•ÊòæÁ§∫ÊàêÂäüÁªìÊûú', () => {
      const consoleSpy = jest.spyOn(console, 'log').mockImplementation();
      
      const result = {
        success: true,
        message: 'Êìç‰ΩúÊàêÂäü',
        data: { id: 1 }
      };
      
      (cli as any).displayResult(result);
      
      expect(consoleSpy).toHaveBeenCalledWith('‚úÖ ÊâßË°åÊàêÂäü:');
      expect(consoleSpy).toHaveBeenCalledWith('Êìç‰ΩúÊàêÂäü');
      expect(consoleSpy).toHaveBeenCalledWith('Êï∞ÊçÆ:', { id: 1 });
      
      consoleSpy.mockRestore();
    });

    it('Â∫îËØ•ÊòæÁ§∫Â§±Ë¥•ÁªìÊûú', () => {
      const consoleSpy = jest.spyOn(console, 'log').mockImplementation();
      
      const result = {
        success: false,
        message: 'Êìç‰ΩúÂ§±Ë¥•',
        data: { error: 'ËØ¶ÁªÜÈîôËØØ' }
      };
      
      (cli as any).displayResult(result);
      
      expect(consoleSpy).toHaveBeenCalledWith('‚ùå ÊâßË°åÂ§±Ë¥•:');
      expect(consoleSpy).toHaveBeenCalledWith('Êìç‰ΩúÂ§±Ë¥•');
      expect(consoleSpy).toHaveBeenCalledWith('ÈîôËØØËØ¶ÊÉÖ:', { error: 'ËØ¶ÁªÜÈîôËØØ' });
      
      consoleSpy.mockRestore();
    });

    it('Â∫îËØ•Â§ÑÁêÜÊ≤°ÊúâÊï∞ÊçÆÁöÑÁªìÊûú', () => {
      const consoleSpy = jest.spyOn(console, 'log').mockImplementation();
      
      const result = {
        success: true,
        message: 'Êìç‰ΩúÊàêÂäü'
      };
      
      (cli as any).displayResult(result);
      
      expect(consoleSpy).toHaveBeenCalledWith('‚úÖ ÊâßË°åÊàêÂäü:');
      expect(consoleSpy).toHaveBeenCalledWith('Êìç‰ΩúÊàêÂäü');
      // ‰∏çÂ∫îËØ•Ë∞ÉÁî®Êï∞ÊçÆÁõ∏ÂÖ≥ÁöÑÊó•Âøó
      expect(consoleSpy).not.toHaveBeenCalledWith('Êï∞ÊçÆ:', expect.anything());
      
      consoleSpy.mockRestore();
    });
  });

  describe('handleError', () => {
    it('Â∫îËØ•Â§ÑÁêÜÈîôËØØ‰ø°ÊÅØ', () => {
      const consoleSpy = jest.spyOn(console, 'log').mockImplementation();
      
      (cli as any).handleError('ÊµãËØïÈîôËØØ');
      
      expect(consoleSpy).toHaveBeenCalledWith('‚ùå ÈîôËØØ:', 'ÊµãËØïÈîôËØØ');
      expect(consoleSpy).toHaveBeenCalledWith();
      
      consoleSpy.mockRestore();
    });
  });

  describe('run', () => {
    it('Â∫îËØ•ËøêË°åCLI‰∏ªÂæ™ÁéØ', async () => {
      const printBannerSpy = jest.spyOn(cli as any, 'printBanner');
      const printStatusSpy = jest.spyOn(cli as any, 'printStatus');
      const showPromptSpy = jest.spyOn(cli as any, 'showPrompt');
      
      // Mock running‰∏∫falseÊù•ÈÄÄÂá∫Âæ™ÁéØ
      Object.defineProperty(cli as any, 'running', {
        get: jest.fn().mockReturnValue(false),
        set: jest.fn()
      });
      
      await cli.run();
      
      expect(printBannerSpy).toHaveBeenCalled();
      expect(printStatusSpy).toHaveBeenCalled();
      
      printBannerSpy.mockRestore();
      printStatusSpy.mockRestore();
      showPromptSpy.mockRestore();
    });

    it('Â∫îËØ•Â§ÑÁêÜSIGINTÈîôËØØ', async () => {
      // Mock running‰∏∫falseÊù•ÈÄÄÂá∫Âæ™ÁéØ
      Object.defineProperty(cli as any, 'running', {
        get: jest.fn().mockReturnValue(false),
        set: jest.fn()
      });
      
      // Áõ¥Êé•ÊµãËØïÈîôËØØÂ§ÑÁêÜÈÄªËæë
      const handleErrorSpy = jest.spyOn(cli as any, 'handleError');
      
      // Ê®°Êãü‰∏Ä‰∏™SIGINTÈîôËØØ
      const error = new Error('SIGINT');
      error.message = 'SIGINT';
      
      // Áõ¥Êé•Ë∞ÉÁî®ÈîôËØØÂ§ÑÁêÜ
      (cli as any).handleError(`ÂèëÁîüÊú™È¢ÑÊúüÁöÑÈîôËØØ: ${error}`);
      
      expect(handleErrorSpy).toHaveBeenCalledWith('ÂèëÁîüÊú™È¢ÑÊúüÁöÑÈîôËØØ: Error: SIGINT');
      
      handleErrorSpy.mockRestore();
    });

    it('Â∫îËØ•Â§ÑÁêÜÊú™È¢ÑÊúüÁöÑÈîôËØØ', async () => {
      // Áõ¥Êé•ÊµãËØïÈîôËØØÂ§ÑÁêÜÈÄªËæë
      const handleErrorSpy = jest.spyOn(cli as any, 'handleError');
      
      // Ê®°Êãü‰∏Ä‰∏™Êú™È¢ÑÊúüÈîôËØØ
      const error = new Error('Êú™È¢ÑÊúüÈîôËØØ');
      
      // Áõ¥Êé•Ë∞ÉÁî®ÈîôËØØÂ§ÑÁêÜ
      (cli as any).handleError(`ÂèëÁîüÊú™È¢ÑÊúüÁöÑÈîôËØØ: ${error}`);
      
      expect(handleErrorSpy).toHaveBeenCalledWith('ÂèëÁîüÊú™È¢ÑÊúüÁöÑÈîôËØØ: Error: Êú™È¢ÑÊúüÈîôËØØ');
      
      handleErrorSpy.mockRestore();
    });
  });
});

describe('CommandParser', () => {
  describe('parseCommand', () => {
    it('Â∫îËØ•Ëß£ÊûêÂü∫Êú¨ÂëΩ‰ª§', () => {
      const result = CommandParser.parseCommand('help');
      expect(result.command).toBe('help');
      expect(result.params).toEqual({});
    });

    it('Â∫îËØ•Ëß£ÊûêÂ∏¶ÊñúÊù†ÁöÑÂëΩ‰ª§', () => {
      const result = CommandParser.parseCommand('/help');
      expect(result.command).toBe('help');
      expect(result.params).toEqual({});
    });

    it('Â∫îËØ•Ëß£ÊûêÂ∏¶ÂèÇÊï∞ÁöÑÂëΩ‰ª§', () => {
      const result = CommandParser.parseCommand('add account=test amount=100');
      expect(result.command).toBe('add');
      expect(result.params).toEqual({
        account: 'test',
        amount: 100
      });
    });

    it('Â∫îËØ•Ëß£Êûê‰ΩçÁΩÆÂèÇÊï∞', () => {
      const result = CommandParser.parseCommand('add test 100 description');
      expect(result.command).toBe('add');
      expect(result.params).toEqual({
        args: ['test', '100', 'description']
      });
    });

    it('Â∫îËØ•Â§ÑÁêÜÁ©∫ËæìÂÖ•', () => {
      const result = CommandParser.parseCommand('');
      expect(result.command).toBe('');
      expect(result.params).toEqual({});
    });

    it('Â∫îËØ•Â§ÑÁêÜÂè™ÊúâÁ©∫Ê†ºÁöÑËæìÂÖ•', () => {
      const result = CommandParser.parseCommand('   ');
      expect(result.command).toBe('');
      expect(result.params).toEqual({});
    });

    it('Â∫îËØ•Â§ÑÁêÜÂ∏¶Á≠âÂè∑‰ΩÜÊ≤°ÊúâÂÄºÁöÑÂèÇÊï∞', () => {
      const result = CommandParser.parseCommand('add key=');
      expect(result.command).toBe('add');
      expect(result.params).toEqual({
        key: 0
      });
    });
  });

  describe('validateCommand', () => {
    it('Â∫îËØ•È™åËØÅÊúâÊïàÂëΩ‰ª§', () => {
      const validCommands = ['help', 'add', 'list', 'balance', 'quit', 'reload'];
      
      validCommands.forEach(cmd => {
        expect(CommandParser.validateCommand(cmd)).toBe(true);
      });
    });

    it('Â∫îËØ•ÊãíÁªùÊó†ÊïàÂëΩ‰ª§', () => {
      const invalidCommands = ['unknown', 'test', 'invalid', ''];
      
      invalidCommands.forEach(cmd => {
        expect(CommandParser.validateCommand(cmd)).toBe(false);
      });
    });
  });

  describe('getCommandHelp', () => {
    it('Â∫îËØ•ËøîÂõûÊúâÊïàÂëΩ‰ª§ÁöÑÂ∏ÆÂä©‰ø°ÊÅØ', () => {
      const help = CommandParser.getCommandHelp('help');
      expect(help).toBe('ÊòæÁ§∫Â∏ÆÂä©‰ø°ÊÅØ„ÄÇÁî®Ê≥ï: /help [ÂëΩ‰ª§Âêç]');
    });

    it('Â∫îËØ•ËøîÂõûnullÂØπ‰∫éÊó†ÊïàÂëΩ‰ª§', () => {
      const help = CommandParser.getCommandHelp('unknown');
      expect(help).toBeNull();
    });
  });
});

describe('main function', () => {
  it('Â∫îËØ•ÂàõÂª∫CLIÂÆû‰æãÂπ∂ËøêË°å', () => {
    // Ëøô‰∏™ÊµãËØï‰∏ªË¶ÅÊòØ‰∏∫‰∫ÜË¶ÜÁõñmainÂáΩÊï∞
    // Áî±‰∫émainÂáΩÊï∞‰ΩøÁî®‰∫ÜcommanderÔºåÊàë‰ª¨Âè™ÈúÄË¶ÅÁ°Æ‰øùÂÆÉ‰∏ç‰ºöÊäõÂá∫ÈîôËØØ
    expect(() => {
      // ÈáçÊñ∞ÂØºÂÖ•‰ª•Ëß¶ÂèëmainÂáΩÊï∞
      jest.resetModules();
      require('../cli');
    }).not.toThrow();
  });
}); 